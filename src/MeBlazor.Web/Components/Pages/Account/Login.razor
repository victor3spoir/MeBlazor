@page "/account/login"
@inject NavigationManager navManager
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<div>
  <h2>Login</h2>

  <div class="col-5">
    <EditForm method="post" FormName="login" Enhance OnValidSubmit="LoginAsync" Model="@loginDto">
      <DataAnnotationsValidator />
      <ValidationSummary />
      <div class="my-2">
        <label for="username" class="form-label">Username</label>
        <InputText type="text" @bind-Value=@loginDto.Username placeholder="Username" bind-Value required
          class="form-control" id="username" />
      </div>
      <div class="my-2">
        <label for="password" class="form-label">Password</label>
        <InputText type="text" @bind-Value=@loginDto.Password placeholder="password" bind-Value required
          class="form-control" id="password" />
      </div>
      <div class=" mt-3 btn-group">
        <button class="btn btn-primary" type="submit">Login</button>
        <button type="reset" class="btn btn-danger">Reset</button>
      </div>
    </EditForm>
  </div>
</div>

@code {
  [SupplyParameterFromForm] public LoginDto loginDto { get; set; }
  [CascadingParameter] public HttpContext context { get; set; } = default!;
  [SupplyParameterFromQuery] public string returnUrl { get; set; } = default!;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    if (loginDto == null)
      loginDto = new();
  }

  async Task LoginAsync()
  {

    Claim[] claims = new[]{
new Claim(ClaimTypes.Name, loginDto.Username),
new Claim(ClaimTypes.Email, "username@gmail.com"),
new Claim(ClaimTypes.Name, "username")
};

    ClaimsIdentity identity = new(claims, CookieAuthenticationDefaults.AuthenticationScheme);
    ClaimsPrincipal principal = new(identity);
    await context.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
    navManager.NavigateTo(returnUrl, true);
  }

  public class LoginDto
  {
    [Required]
    [MinLength(5)]
    public string Username { get; set; } = string.Empty;
    [Required]
    [MinLength(5)]
    public string Password { get; set; } = string.Empty;
  }
}
