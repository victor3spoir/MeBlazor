@inject ILogger<TasksList> logger
@rendermode InteractiveServer


<div class="row-cols-2">
  <div class="col p-2 bg-secondary rounded" style="min-height: 75vh; max-height: 600px">
    <h2>All Tasks</h2>
    <div class="input-group">
      <input type="text" class="form-control" placeholder="Enter Task" @bind="newTask" />
      <button type="button" class="btn btn-success btn-sm" @onclick="AddTask">
        Add
      </button>
    </div>
    <div class="mt-3 pr-6" style="max-height: 400px;overflow-y: scroll;">
      @if (tasks is null)
      {
        <span>Loading....</span>
      }
      else if (tasks.Count() < 0)
      {
        <span>Not programmed task.</span>
      }
      else
      {

        @foreach (var task in tasks)
        {
          <article class="d-flex  mx-auto border border-dark rounded-2 p-1 my-2" @key="task.Id">
            <div class="p-2 flex-fill">
              <input type="checkbox" class="form-check-inline" checked="@(task.Status == TaskItemStatus.DONE)"
                @onchange="@(() => ToggleTaskStatus(task))" />
              <span class="@((task.IsComplete ? "completed-task" : ""))">
                @task.TaskName
              </span>
            </div>
            @* <div>
              <select name="" id="" class="form-control">
                @foreach (var status in Enum.GetValues(typeof(TaskItemStatus)).Cast<TaskItemStatus>().ToList())
                {
                  <option value=@status selected=@(status == task.Status)>@status.ToString()</option>

                }
              </select>
            </div> *@
            <div class="p-1">
              <button type="button" class="btn btn-danger btn-sm" title="Delete task" @onclick=@(() => DeleteTask(task))>
                Delete
              </button>
            </div>
          </article>
        }

      }
    </div>
  </div>
</div>

@if (error is not null)
{
  <div class="alert alert-danger">@error?.ToString()</div>
}



@code {

  private IList<TaskItemReadDto>? tasks;
  string newTask;

  private string? error;

  string taskEndpoint = "/api/taskitems";

  [Parameter]
  public HttpClient httpClient { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await FetchTask();

    await base.OnInitializedAsync();
  }


  async Task FetchTask()
  {
    try { tasks = await httpClient.GetFromJsonAsync<IList<TaskItemReadDto>>($"{taskEndpoint}"); }
    catch (Exception) { error = "Error occurs"; }
  ;
  }

  async Task ToggleTaskStatus(TaskItemReadDto item)
  {
    try
    {
      var copyItem = item;
      copyItem.Status = copyItem.Status == TaskItemStatus.TODO ? TaskItemStatus.DONE : TaskItemStatus.TODO;
      var response = await httpClient.PutAsJsonAsync<TaskItemUpdateDto>($"{taskEndpoint}/{copyItem.Id}",
      TaskItemUpdateDto.FromReadDto(copyItem));
      if (!response.IsSuccessStatusCode)
      {
        error = $"{response.ReasonPhrase} - {response.StatusCode.ToString()}";
        return;
      }
      item.Status = copyItem.Status;
    }
    catch (Exception ex)
    { Console.WriteLine(ex); }
  }

  async Task DeleteTask(TaskItemReadDto item)
  {
    var response = await httpClient.DeleteAsync($"{taskEndpoint}/{item.Id}");
    if (!response.IsSuccessStatusCode)
    {
      error = $"{response.ReasonPhrase} - {response.StatusCode.ToString()}";
      return;
    }
    tasks.Remove(item);
  }

  async Task AddTask()
  {
    if (String.IsNullOrWhiteSpace(newTask))
      return;
    var itemdto = new TaskItemCreateDto() { TaskName = newTask };
    try
    {
      var response = await httpClient.PostAsJsonAsync<TaskItemCreateDto>($"{taskEndpoint}", itemdto);
      if (!response.IsSuccessStatusCode)
      {
        error = response.ReasonPhrase;
        return;
      }

    }
    catch (Exception) { }
  }
}